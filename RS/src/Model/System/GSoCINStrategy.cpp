/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-  */
/*
* GSoCINStrategy.cpp
* Copyright (C) 2014 LEDS - Univali <zeferino@univali.br>
* Laboratory of Embedded and Distributed Systems
* University of Vale do Itajaí
*
* Authors: Laboratory of Embedded and Distributed Systems (LEDS)
*
* Contact: Profº Dr. Cesar Albenes Zeferino {zeferino@univali.br}
*
* RedScarf is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the
* Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* RedScarf is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
* See the GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program.  If not, see <http://www.gnu.org/licenses/>.
*
* ------------------------------ Reviews -------------------------------------
* Date       - Version - Author                      | Description
* ----------------------------------------------------------------------------
* 10/12/2014 - 1.0     - Eduardo Alves da Silva      | Initial release
*
*/

#include "include/Model/System/GSoCINStrategy.h"

#ifdef DEBUG_POINTS_METHODS
    #include <iostream>
#endif

GSoCINStrategy::GSoCINStrategy(SystemParameters* sp, Experiment *exp) : SoCINGenerationStrategy(sp,exp){
#ifdef DEBUG_POINTS_METHODS
    std::cout << "Constructor Class Model/SystemConfiguration/GSoCINStrategy" << std::endl;
#endif

}


void GSoCINStrategy::generateSocin() throw(const char* ) {
#ifdef DEBUG_POINTS_METHODS
    std::cout << "Model/SystemConfiguration/GSoCINStrategy::generateSocin" << std::endl;
#endif
    unsigned int x,y;                                         // Loop counters
    unsigned int x_size = this->systemParameters->getXSize(); // Network dimensions
    unsigned int y_size = this->systemParameters->getYSize(); // Network dimensions

    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////
    // It creates the description file for SoCIN  (socin.h)
    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////
    if ((this->fileOut=fopen("system/socin.h","wt")) == NULL){
        printf("\nERROR: Cannot open the file system/socin.h for write!!!\n\n");
        throw "Cannot open the file system/socin.h for write!!!";
    }

    //////////////////////////////////////////////////////////////////////////////
    // It prints a header
    //////////////////////////////////////////////////////////////////////////////
    fprintf(this->fileOut,"/*");
    fprintf(this->fileOut,"\n--------------------------------------------------------------------------------");
    fprintf(this->fileOut,"\nPROJECT: SoCIN");
    fprintf(this->fileOut,"\nMODULE : socin  (a %ux%u mesh SoCIN)",x_size, y_size);
    fprintf(this->fileOut,"\nFILE   : socin.h");
    fprintf(this->fileOut,"\n--------------------------------------------------------------------------------");
    fprintf(this->fileOut,"\nDESCRIPTION: This file contains the RTL SystemC description of a %ux%u SoCIN NoC.", x_size, y_size);
    fprintf(this->fileOut,"\n             It was automatically generated by using GNOC tool.");
    fprintf(this->fileOut,"\n--------------------------------------------------------------------------------");
    fprintf(this->fileOut,"\nAUTHORS: Laboratory of Embedded and Distribution System (LSED - UNIVALI)");
    fprintf(this->fileOut,"\nCONTACT: Prof. Cesar Zeferino (zeferino@univali.br)");
    fprintf(this->fileOut,"\n--------------------------------------------------------------------------------");
    fprintf(this->fileOut,"\n*/");

    //////////////////////////////////////////////////////////////////////////////
    // It prints the defines and includes to the file
    //////////////////////////////////////////////////////////////////////////////
    fprintf(this->fileOut,"\n\n#ifndef __SOCIN__");
    fprintf(this->fileOut,"\n#define __SOCIN__");
    fprintf(this->fileOut,"\n\n#include <systemc.h>");
    fprintf(this->fileOut,"\n#include \"parameters.h\"");
    fprintf(this->fileOut,"\n#include \"paris.h\"");
    fprintf(this->fileOut,"\n");

    fprintf(this->fileOut,"\nSC_MODULE(socin)");
    fprintf(this->fileOut,"\n{");
    fprintf(this->fileOut,"\n    // INTERFACE");
    fprintf(this->fileOut,"\n    // System signals");
    fprintf(this->fileOut,"\n    sc_in_clk                    clk;");
    fprintf(this->fileOut,"\n    sc_in<bool>                  rst;");
    fprintf(this->fileOut,"\n");

    for(x=0;x<x_size;x++) {
        for(y=0;y<y_size;y++) {
            fprintf(this->fileOut,"\n    // Router (%u,%u) - Local Communication Port   ",x,y);
            fprintf(this->fileOut,"\n    sc_in<sc_uint<FLIT_WIDTH> >  L_%u_%u_in_data; ",x,y);
            fprintf(this->fileOut,"\n    sc_in<bool>                  L_%u_%u_in_val;  ",x,y);
            fprintf(this->fileOut,"\n    sc_out<bool>                 L_%u_%u_in_ret;  ",x,y);
            fprintf(this->fileOut,"\n    sc_out<sc_uint<FLIT_WIDTH> > L_%u_%u_out_data;",x,y);
            fprintf(this->fileOut,"\n    sc_out<bool>                 L_%u_%u_out_val; ",x,y);
            fprintf(this->fileOut,"\n    sc_in<bool>                  L_%u_%u_out_ret; ",x,y);
            fprintf(this->fileOut,"\n");
        }
    }
    fprintf(this->fileOut,"\n    // SIGNALS");
    fprintf(this->fileOut,"\n    // Sinals for the links on the X direction, including the link to be connected  ");
    fprintf(this->fileOut,"\n    // to the unused ports on the periphery of the network");
    fprintf(this->fileOut,"\n");

    for(y=0;y<y_size;y++) {
        fprintf(this->fileOut,"\n    // Links on Row %u",y);
        for(x=0;x<=x_size;x++) {
            fprintf(this->fileOut,"\n    sc_signal<sc_uint<FLIT_WIDTH> > X_%u_%u_in_data_wire; ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 X_%u_%u_in_val_wire;  ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 X_%u_%u_in_ret_wire;  ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<sc_uint<FLIT_WIDTH> > X_%u_%u_out_data_wire;",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 X_%u_%u_out_val_wire; ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 X_%u_%u_out_ret_wire; ",x,y);
            fprintf(this->fileOut,"\n");
        }
    }

    for(x=0;x<x_size;x++) {
        fprintf(this->fileOut,"\n    // Links on Column %u",x);
        for(y=0;y<=y_size;y++) {
            fprintf(this->fileOut,"\n    sc_signal<sc_uint<FLIT_WIDTH> > Y_%u_%u_in_data_wire; ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 Y_%u_%u_in_val_wire;  ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 Y_%u_%u_in_ret_wire;  ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<sc_uint<FLIT_WIDTH> > Y_%u_%u_out_data_wire;",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 Y_%u_%u_out_val_wire; ",x,y);
            fprintf(this->fileOut,"\n    sc_signal<bool>                 Y_%u_%u_out_ret_wire; ",x,y);
            fprintf(this->fileOut,"\n");
        }
    }

    fprintf(this->fileOut,"\n");
    fprintf(this->fileOut,"\n    // Module's process	");
    fprintf(this->fileOut,"\n#ifdef DEBUG_SOCIN_INTERCONNECT");
    fprintf(this->fileOut,"\n    void p_debug () {}");
//    fprintf(this->fileOut,"\n    }");
    fprintf(this->fileOut,"\n#endif");
    fprintf(this->fileOut,"\n");
    fprintf(this->fileOut,"\n    // Internal data structures");
    fprintf(this->fileOut,"\n");
    fprintf(this->fileOut,"\n    SC_HAS_PROCESS(socin);");
    fprintf(this->fileOut,"\n");

    fprintf(this->fileOut,"\n    //////////////////////////////////////////////////////////////////////////////");
    fprintf(this->fileOut,"\n    socin(sc_module_name nm) : sc_module(nm)");
    fprintf(this->fileOut,"\n    //////////////////////////////////////////////////////////////////////////////");
    fprintf(this->fileOut,"\n    { ");
    fprintf(this->fileOut,"\n#ifdef DEBUG_PARIS_INTERCONNECT");
    fprintf(this->fileOut,"\n        SC_METHOD(p_debug);");
    fprintf(this->fileOut,"\n        sensitive << clk.clk;");
    fprintf(this->fileOut,"\n#endif");
    fprintf(this->fileOut,"\n");

    for(y=0;y<y_size;y++) {
        fprintf(this->fileOut,"\n\n        //////////////////////////////////////////////////////////////////////////////");
        fprintf(this->fileOut,"\n        ////////////////////////////// R O W  %u //////////////////////////////////////",y);
        fprintf(this->fileOut,"\n        //////////////////////////////////////////////////////////////////////////////\n");
        for(x=0;x<x_size;x++) {
            this->useLocal = 1;                  // Local port is always used
            this->useNorth = (y<y_size-1)?1:0;   // North port is not used on the top    border
            this->useEast  = (x<x_size-1)?1:0;   // East  port is not used on the right  border
            this->useSoul  = (y>0)?1:0;          // South port is not used on the botton border
            this->useWest  = (x>0)?1:0;          // West  port is not used on the left   border

            fprintf(this->fileOut,"\n\n        //////////////////////////////////////////////////////////////////////////////");
            fprintf(this->fileOut,"\n        //  this->useLocal, this->useNorth, this->useEast, this->useSoul, this->useWest, XID, YID);");
            fprintf(this->fileOut,"\n        paris *r_%u_%u = new paris(\"r_%u_%u\",    %u,     %u,     %u,     %u,     %u,   %u,   %u);",\
                           x, y, x, y, this->useLocal, this->useNorth, this->useEast, this->useSoul, this->useWest, x, y);
            fprintf(this->fileOut,"\n        //////////////////////////////////////////////////////////////////////////////");
            fprintf(this->fileOut,"\n        r_%u_%u->clk(clk);",x,y);
            fprintf(this->fileOut,"\n        r_%u_%u->rst(rst);",x,y);

            fprintf(this->fileOut,"\n\n        // Local Communication Port");
            fprintf(this->fileOut,"\n        r_%u_%u->Lin_data ( L_%u_%u_in_data );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Lin_val  ( L_%u_%u_in_val  );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Lin_ret  ( L_%u_%u_in_ret  );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Lout_data( L_%u_%u_out_data);", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Lout_val ( L_%u_%u_out_val );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Lout_ret ( L_%u_%u_out_ret );", x, y, x, y);

            fprintf(this->fileOut,"\n\n        // North Communication Port");
            fprintf(this->fileOut,"\n        r_%u_%u->Nin_data ( Y_%u_%u_out_data_wire);", x, y, x, y+1);
            fprintf(this->fileOut,"\n        r_%u_%u->Nin_val  ( Y_%u_%u_out_val_wire );", x, y, x, y+1);
            fprintf(this->fileOut,"\n        r_%u_%u->Nin_ret  ( Y_%u_%u_out_ret_wire );", x, y, x, y+1);
            fprintf(this->fileOut,"\n        r_%u_%u->Nout_data( Y_%u_%u_in_data_wire );", x, y, x, y+1);
            fprintf(this->fileOut,"\n        r_%u_%u->Nout_val ( Y_%u_%u_in_val_wire  );", x, y, x, y+1);
            fprintf(this->fileOut,"\n        r_%u_%u->Nout_ret ( Y_%u_%u_in_ret_wire  );", x, y, x, y+1);

            fprintf(this->fileOut,"\n\n        // East Communication Port");
            fprintf(this->fileOut,"\n        r_%u_%u->Ein_data ( X_%u_%u_out_data_wire);", x, y, x+1, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Ein_val  ( X_%u_%u_out_val_wire );", x, y, x+1, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Ein_ret  ( X_%u_%u_out_ret_wire );", x, y, x+1, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Eout_data( X_%u_%u_in_data_wire );", x, y, x+1, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Eout_val ( X_%u_%u_in_val_wire  );", x, y, x+1, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Eout_ret ( X_%u_%u_in_ret_wire  );", x, y, x+1, y);

            fprintf(this->fileOut,"\n\n        // South Communication Port");
            fprintf(this->fileOut,"\n        r_%u_%u->Sin_data ( Y_%u_%u_in_data_wire );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Sin_val  ( Y_%u_%u_in_val_wire  );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Sin_ret  ( Y_%u_%u_in_ret_wire  );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Sout_data( Y_%u_%u_out_data_wire);", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Sout_val ( Y_%u_%u_out_val_wire );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Sout_ret ( Y_%u_%u_out_ret_wire );", x, y, x, y);

            fprintf(this->fileOut,"\n\n        // West Communication Port");
            fprintf(this->fileOut,"\n        r_%u_%u->Win_data ( X_%u_%u_in_data_wire );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Win_val  ( X_%u_%u_in_val_wire  );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Win_ret  ( X_%u_%u_in_ret_wire  );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Wout_data( X_%u_%u_out_data_wire);", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Wout_val ( X_%u_%u_out_val_wire );", x, y, x, y);
            fprintf(this->fileOut,"\n        r_%u_%u->Wout_ret ( X_%u_%u_out_ret_wire );", x, y, x, y);
        }
    }

    fprintf(this->fileOut,"\n\n    }");
    fprintf(this->fileOut,"\n};");
    fprintf(this->fileOut,"\n\n#endif // __SOCIN_H__");

    fprintf(this->fileOut,"\n");
    fclose(this->fileOut);
}



void GSoCINStrategy::generateNoc() throw(const char* ) {
#ifdef DEBUG_POINTS_METHODS
    std::cout << "Model/SystemConfiguration/GSoCINStrategy::generateNoc" << std::endl;
#endif

    // Cria o diretrio dos arquivos a serem gerados
    try {
        FolderOperation::createFolder("system");
    } catch(const char* e) {
        throw e;
    }

    try {
        this->generateParameters();
    } catch(...) {
        throw "Problem occurred in generation parameters(.h).\nNone generated file";
    }
    try {
        this->generateSocin();
    } catch(...) {
        throw "Problem occurred in generation socin(.h).\nParameters file generated, but socin.h not generated";
    }
}

