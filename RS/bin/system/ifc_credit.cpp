/*
--------------------------------------------------------------------------------
PROJECT: ParIS
MODULE : ifc_credit (credit-based input flow controller )
FILE	 : ifc_credit.cpp
--------------------------------------------------------------------------------
*/
#include "ifc_credit.h"

////////////////////////////////////////////////////////////////////////////////
void ifc_credit::p_return()
////////////////////////////////////////////////////////////////////////////////
{
    if (rst.read()==1)
        ret.write(0);
    else
        ret.write(rd.read() and rok.read());
}

////////////////////////////////////////////////////////////////////////////////
void ifc_credit::p_valid()
////////////////////////////////////////////////////////////////////////////////
{
    wr.write(val.read());
}

////////////////////////////////////////////////////////////////////////////////
void ifc_credit::p_debug()
////////////////////////////////////////////////////////////////////////////////
{
    static long int cycle = 0;
    char port[5] = {'L','N','E','S','W'};

    printf("\n[ifc_credit(%d,%d)-%c] @ cycle %ld",XID, YID,port[PORT_ID],cycle++);
    cout  << "   val=" << val.read() \
          << "   ret=" << ret.read() \
          << "   wr="  << wr.read()  \
          << "   rd="  << rd.read()  \
          << "\t";
}
