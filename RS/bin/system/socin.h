/*
--------------------------------------------------------------------------------
PROJECT: SoCIN
MODULE : socin  (a 2x2 mesh SoCIN)
FILE   : socin.h
--------------------------------------------------------------------------------
DESCRIPTION: This file contains the RTL SystemC description of a 2x2 SoCIN NoC.
             It was automatically generated by using GNOC tool.
--------------------------------------------------------------------------------
AUTHORS: Laboratory of Embedded and Distribution System (LSED - UNIVALI)
CONTACT: Prof. Cesar Zeferino (zeferino@univali.br)
--------------------------------------------------------------------------------
*/

#ifndef __SOCIN__
#define __SOCIN__

#include <systemc.h>
#include "parameters.h"
#include "paris.h"

SC_MODULE(socin)
{
    // INTERFACE
    // System signals
    sc_in_clk                    clk;
    sc_in<bool>                  rst;

    // Router (0,0) - Local Communication Port   
    sc_in<sc_uint<FLIT_WIDTH> >  L_0_0_in_data; 
    sc_in<bool>                  L_0_0_in_val;  
    sc_out<bool>                 L_0_0_in_ret;  
    sc_out<sc_uint<FLIT_WIDTH> > L_0_0_out_data;
    sc_out<bool>                 L_0_0_out_val; 
    sc_in<bool>                  L_0_0_out_ret; 

    // Router (0,1) - Local Communication Port   
    sc_in<sc_uint<FLIT_WIDTH> >  L_0_1_in_data; 
    sc_in<bool>                  L_0_1_in_val;  
    sc_out<bool>                 L_0_1_in_ret;  
    sc_out<sc_uint<FLIT_WIDTH> > L_0_1_out_data;
    sc_out<bool>                 L_0_1_out_val; 
    sc_in<bool>                  L_0_1_out_ret; 

    // Router (1,0) - Local Communication Port   
    sc_in<sc_uint<FLIT_WIDTH> >  L_1_0_in_data; 
    sc_in<bool>                  L_1_0_in_val;  
    sc_out<bool>                 L_1_0_in_ret;  
    sc_out<sc_uint<FLIT_WIDTH> > L_1_0_out_data;
    sc_out<bool>                 L_1_0_out_val; 
    sc_in<bool>                  L_1_0_out_ret; 

    // Router (1,1) - Local Communication Port   
    sc_in<sc_uint<FLIT_WIDTH> >  L_1_1_in_data; 
    sc_in<bool>                  L_1_1_in_val;  
    sc_out<bool>                 L_1_1_in_ret;  
    sc_out<sc_uint<FLIT_WIDTH> > L_1_1_out_data;
    sc_out<bool>                 L_1_1_out_val; 
    sc_in<bool>                  L_1_1_out_ret; 

    // SIGNALS
    // Sinals for the links on the X direction, including the link to be connected  
    // to the unused ports on the periphery of the network

    // Links on Row 0
    sc_signal<sc_uint<FLIT_WIDTH> > X_0_0_in_data_wire; 
    sc_signal<bool>                 X_0_0_in_val_wire;  
    sc_signal<bool>                 X_0_0_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > X_0_0_out_data_wire;
    sc_signal<bool>                 X_0_0_out_val_wire; 
    sc_signal<bool>                 X_0_0_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > X_1_0_in_data_wire; 
    sc_signal<bool>                 X_1_0_in_val_wire;  
    sc_signal<bool>                 X_1_0_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > X_1_0_out_data_wire;
    sc_signal<bool>                 X_1_0_out_val_wire; 
    sc_signal<bool>                 X_1_0_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > X_2_0_in_data_wire; 
    sc_signal<bool>                 X_2_0_in_val_wire;  
    sc_signal<bool>                 X_2_0_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > X_2_0_out_data_wire;
    sc_signal<bool>                 X_2_0_out_val_wire; 
    sc_signal<bool>                 X_2_0_out_ret_wire; 

    // Links on Row 1
    sc_signal<sc_uint<FLIT_WIDTH> > X_0_1_in_data_wire; 
    sc_signal<bool>                 X_0_1_in_val_wire;  
    sc_signal<bool>                 X_0_1_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > X_0_1_out_data_wire;
    sc_signal<bool>                 X_0_1_out_val_wire; 
    sc_signal<bool>                 X_0_1_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > X_1_1_in_data_wire; 
    sc_signal<bool>                 X_1_1_in_val_wire;  
    sc_signal<bool>                 X_1_1_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > X_1_1_out_data_wire;
    sc_signal<bool>                 X_1_1_out_val_wire; 
    sc_signal<bool>                 X_1_1_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > X_2_1_in_data_wire; 
    sc_signal<bool>                 X_2_1_in_val_wire;  
    sc_signal<bool>                 X_2_1_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > X_2_1_out_data_wire;
    sc_signal<bool>                 X_2_1_out_val_wire; 
    sc_signal<bool>                 X_2_1_out_ret_wire; 

    // Links on Column 0
    sc_signal<sc_uint<FLIT_WIDTH> > Y_0_0_in_data_wire; 
    sc_signal<bool>                 Y_0_0_in_val_wire;  
    sc_signal<bool>                 Y_0_0_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > Y_0_0_out_data_wire;
    sc_signal<bool>                 Y_0_0_out_val_wire; 
    sc_signal<bool>                 Y_0_0_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > Y_0_1_in_data_wire; 
    sc_signal<bool>                 Y_0_1_in_val_wire;  
    sc_signal<bool>                 Y_0_1_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > Y_0_1_out_data_wire;
    sc_signal<bool>                 Y_0_1_out_val_wire; 
    sc_signal<bool>                 Y_0_1_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > Y_0_2_in_data_wire; 
    sc_signal<bool>                 Y_0_2_in_val_wire;  
    sc_signal<bool>                 Y_0_2_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > Y_0_2_out_data_wire;
    sc_signal<bool>                 Y_0_2_out_val_wire; 
    sc_signal<bool>                 Y_0_2_out_ret_wire; 

    // Links on Column 1
    sc_signal<sc_uint<FLIT_WIDTH> > Y_1_0_in_data_wire; 
    sc_signal<bool>                 Y_1_0_in_val_wire;  
    sc_signal<bool>                 Y_1_0_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > Y_1_0_out_data_wire;
    sc_signal<bool>                 Y_1_0_out_val_wire; 
    sc_signal<bool>                 Y_1_0_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > Y_1_1_in_data_wire; 
    sc_signal<bool>                 Y_1_1_in_val_wire;  
    sc_signal<bool>                 Y_1_1_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > Y_1_1_out_data_wire;
    sc_signal<bool>                 Y_1_1_out_val_wire; 
    sc_signal<bool>                 Y_1_1_out_ret_wire; 

    sc_signal<sc_uint<FLIT_WIDTH> > Y_1_2_in_data_wire; 
    sc_signal<bool>                 Y_1_2_in_val_wire;  
    sc_signal<bool>                 Y_1_2_in_ret_wire;  
    sc_signal<sc_uint<FLIT_WIDTH> > Y_1_2_out_data_wire;
    sc_signal<bool>                 Y_1_2_out_val_wire; 
    sc_signal<bool>                 Y_1_2_out_ret_wire; 


    // Module's process	
#ifdef DEBUG_SOCIN_INTERCONNECT
    void p_debug () {}
#endif

    // Internal data structures

    SC_HAS_PROCESS(socin);

    //////////////////////////////////////////////////////////////////////////////
    socin(sc_module_name nm) : sc_module(nm)
    //////////////////////////////////////////////////////////////////////////////
    { 
#ifdef DEBUG_PARIS_INTERCONNECT
        SC_METHOD(p_debug);
        sensitive << clk.clk;
#endif


        //////////////////////////////////////////////////////////////////////////////
        ////////////////////////////// R O W  0 //////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////


        //////////////////////////////////////////////////////////////////////////////
        //  this->useLocal, this->useNorth, this->useEast, this->useSoul, this->useWest, XID, YID);
        paris *r_0_0 = new paris("r_0_0",    1,     1,     1,     0,     0,   0,   0);
        //////////////////////////////////////////////////////////////////////////////
        r_0_0->clk(clk);
        r_0_0->rst(rst);

        // Local Communication Port
        r_0_0->Lin_data ( L_0_0_in_data );
        r_0_0->Lin_val  ( L_0_0_in_val  );
        r_0_0->Lin_ret  ( L_0_0_in_ret  );
        r_0_0->Lout_data( L_0_0_out_data);
        r_0_0->Lout_val ( L_0_0_out_val );
        r_0_0->Lout_ret ( L_0_0_out_ret );

        // North Communication Port
        r_0_0->Nin_data ( Y_0_1_out_data_wire);
        r_0_0->Nin_val  ( Y_0_1_out_val_wire );
        r_0_0->Nin_ret  ( Y_0_1_out_ret_wire );
        r_0_0->Nout_data( Y_0_1_in_data_wire );
        r_0_0->Nout_val ( Y_0_1_in_val_wire  );
        r_0_0->Nout_ret ( Y_0_1_in_ret_wire  );

        // East Communication Port
        r_0_0->Ein_data ( X_1_0_out_data_wire);
        r_0_0->Ein_val  ( X_1_0_out_val_wire );
        r_0_0->Ein_ret  ( X_1_0_out_ret_wire );
        r_0_0->Eout_data( X_1_0_in_data_wire );
        r_0_0->Eout_val ( X_1_0_in_val_wire  );
        r_0_0->Eout_ret ( X_1_0_in_ret_wire  );

        // South Communication Port
        r_0_0->Sin_data ( Y_0_0_in_data_wire );
        r_0_0->Sin_val  ( Y_0_0_in_val_wire  );
        r_0_0->Sin_ret  ( Y_0_0_in_ret_wire  );
        r_0_0->Sout_data( Y_0_0_out_data_wire);
        r_0_0->Sout_val ( Y_0_0_out_val_wire );
        r_0_0->Sout_ret ( Y_0_0_out_ret_wire );

        // West Communication Port
        r_0_0->Win_data ( X_0_0_in_data_wire );
        r_0_0->Win_val  ( X_0_0_in_val_wire  );
        r_0_0->Win_ret  ( X_0_0_in_ret_wire  );
        r_0_0->Wout_data( X_0_0_out_data_wire);
        r_0_0->Wout_val ( X_0_0_out_val_wire );
        r_0_0->Wout_ret ( X_0_0_out_ret_wire );

        //////////////////////////////////////////////////////////////////////////////
        //  this->useLocal, this->useNorth, this->useEast, this->useSoul, this->useWest, XID, YID);
        paris *r_1_0 = new paris("r_1_0",    1,     1,     0,     0,     1,   1,   0);
        //////////////////////////////////////////////////////////////////////////////
        r_1_0->clk(clk);
        r_1_0->rst(rst);

        // Local Communication Port
        r_1_0->Lin_data ( L_1_0_in_data );
        r_1_0->Lin_val  ( L_1_0_in_val  );
        r_1_0->Lin_ret  ( L_1_0_in_ret  );
        r_1_0->Lout_data( L_1_0_out_data);
        r_1_0->Lout_val ( L_1_0_out_val );
        r_1_0->Lout_ret ( L_1_0_out_ret );

        // North Communication Port
        r_1_0->Nin_data ( Y_1_1_out_data_wire);
        r_1_0->Nin_val  ( Y_1_1_out_val_wire );
        r_1_0->Nin_ret  ( Y_1_1_out_ret_wire );
        r_1_0->Nout_data( Y_1_1_in_data_wire );
        r_1_0->Nout_val ( Y_1_1_in_val_wire  );
        r_1_0->Nout_ret ( Y_1_1_in_ret_wire  );

        // East Communication Port
        r_1_0->Ein_data ( X_2_0_out_data_wire);
        r_1_0->Ein_val  ( X_2_0_out_val_wire );
        r_1_0->Ein_ret  ( X_2_0_out_ret_wire );
        r_1_0->Eout_data( X_2_0_in_data_wire );
        r_1_0->Eout_val ( X_2_0_in_val_wire  );
        r_1_0->Eout_ret ( X_2_0_in_ret_wire  );

        // South Communication Port
        r_1_0->Sin_data ( Y_1_0_in_data_wire );
        r_1_0->Sin_val  ( Y_1_0_in_val_wire  );
        r_1_0->Sin_ret  ( Y_1_0_in_ret_wire  );
        r_1_0->Sout_data( Y_1_0_out_data_wire);
        r_1_0->Sout_val ( Y_1_0_out_val_wire );
        r_1_0->Sout_ret ( Y_1_0_out_ret_wire );

        // West Communication Port
        r_1_0->Win_data ( X_1_0_in_data_wire );
        r_1_0->Win_val  ( X_1_0_in_val_wire  );
        r_1_0->Win_ret  ( X_1_0_in_ret_wire  );
        r_1_0->Wout_data( X_1_0_out_data_wire);
        r_1_0->Wout_val ( X_1_0_out_val_wire );
        r_1_0->Wout_ret ( X_1_0_out_ret_wire );

        //////////////////////////////////////////////////////////////////////////////
        ////////////////////////////// R O W  1 //////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////


        //////////////////////////////////////////////////////////////////////////////
        //  this->useLocal, this->useNorth, this->useEast, this->useSoul, this->useWest, XID, YID);
        paris *r_0_1 = new paris("r_0_1",    1,     0,     1,     1,     0,   0,   1);
        //////////////////////////////////////////////////////////////////////////////
        r_0_1->clk(clk);
        r_0_1->rst(rst);

        // Local Communication Port
        r_0_1->Lin_data ( L_0_1_in_data );
        r_0_1->Lin_val  ( L_0_1_in_val  );
        r_0_1->Lin_ret  ( L_0_1_in_ret  );
        r_0_1->Lout_data( L_0_1_out_data);
        r_0_1->Lout_val ( L_0_1_out_val );
        r_0_1->Lout_ret ( L_0_1_out_ret );

        // North Communication Port
        r_0_1->Nin_data ( Y_0_2_out_data_wire);
        r_0_1->Nin_val  ( Y_0_2_out_val_wire );
        r_0_1->Nin_ret  ( Y_0_2_out_ret_wire );
        r_0_1->Nout_data( Y_0_2_in_data_wire );
        r_0_1->Nout_val ( Y_0_2_in_val_wire  );
        r_0_1->Nout_ret ( Y_0_2_in_ret_wire  );

        // East Communication Port
        r_0_1->Ein_data ( X_1_1_out_data_wire);
        r_0_1->Ein_val  ( X_1_1_out_val_wire );
        r_0_1->Ein_ret  ( X_1_1_out_ret_wire );
        r_0_1->Eout_data( X_1_1_in_data_wire );
        r_0_1->Eout_val ( X_1_1_in_val_wire  );
        r_0_1->Eout_ret ( X_1_1_in_ret_wire  );

        // South Communication Port
        r_0_1->Sin_data ( Y_0_1_in_data_wire );
        r_0_1->Sin_val  ( Y_0_1_in_val_wire  );
        r_0_1->Sin_ret  ( Y_0_1_in_ret_wire  );
        r_0_1->Sout_data( Y_0_1_out_data_wire);
        r_0_1->Sout_val ( Y_0_1_out_val_wire );
        r_0_1->Sout_ret ( Y_0_1_out_ret_wire );

        // West Communication Port
        r_0_1->Win_data ( X_0_1_in_data_wire );
        r_0_1->Win_val  ( X_0_1_in_val_wire  );
        r_0_1->Win_ret  ( X_0_1_in_ret_wire  );
        r_0_1->Wout_data( X_0_1_out_data_wire);
        r_0_1->Wout_val ( X_0_1_out_val_wire );
        r_0_1->Wout_ret ( X_0_1_out_ret_wire );

        //////////////////////////////////////////////////////////////////////////////
        //  this->useLocal, this->useNorth, this->useEast, this->useSoul, this->useWest, XID, YID);
        paris *r_1_1 = new paris("r_1_1",    1,     0,     0,     1,     1,   1,   1);
        //////////////////////////////////////////////////////////////////////////////
        r_1_1->clk(clk);
        r_1_1->rst(rst);

        // Local Communication Port
        r_1_1->Lin_data ( L_1_1_in_data );
        r_1_1->Lin_val  ( L_1_1_in_val  );
        r_1_1->Lin_ret  ( L_1_1_in_ret  );
        r_1_1->Lout_data( L_1_1_out_data);
        r_1_1->Lout_val ( L_1_1_out_val );
        r_1_1->Lout_ret ( L_1_1_out_ret );

        // North Communication Port
        r_1_1->Nin_data ( Y_1_2_out_data_wire);
        r_1_1->Nin_val  ( Y_1_2_out_val_wire );
        r_1_1->Nin_ret  ( Y_1_2_out_ret_wire );
        r_1_1->Nout_data( Y_1_2_in_data_wire );
        r_1_1->Nout_val ( Y_1_2_in_val_wire  );
        r_1_1->Nout_ret ( Y_1_2_in_ret_wire  );

        // East Communication Port
        r_1_1->Ein_data ( X_2_1_out_data_wire);
        r_1_1->Ein_val  ( X_2_1_out_val_wire );
        r_1_1->Ein_ret  ( X_2_1_out_ret_wire );
        r_1_1->Eout_data( X_2_1_in_data_wire );
        r_1_1->Eout_val ( X_2_1_in_val_wire  );
        r_1_1->Eout_ret ( X_2_1_in_ret_wire  );

        // South Communication Port
        r_1_1->Sin_data ( Y_1_1_in_data_wire );
        r_1_1->Sin_val  ( Y_1_1_in_val_wire  );
        r_1_1->Sin_ret  ( Y_1_1_in_ret_wire  );
        r_1_1->Sout_data( Y_1_1_out_data_wire);
        r_1_1->Sout_val ( Y_1_1_out_val_wire );
        r_1_1->Sout_ret ( Y_1_1_out_ret_wire );

        // West Communication Port
        r_1_1->Win_data ( X_1_1_in_data_wire );
        r_1_1->Win_val  ( X_1_1_in_val_wire  );
        r_1_1->Win_ret  ( X_1_1_in_ret_wire  );
        r_1_1->Wout_data( X_1_1_out_data_wire);
        r_1_1->Wout_val ( X_1_1_out_val_wire );
        r_1_1->Wout_ret ( X_1_1_out_ret_wire );

    }
};

#endif // __SOCIN_H__
